To check what is different from the latest commit:
	$ git diff <name of the file>

To go back to the latest commit 
	$ git checkout .

Note: it will only work over changes on files that have been commited before, if you create new files and make changes in those, it won't work.

If we want to go to a previous commit, not jus the latest:
	-> $ git log : to check the commit.
	-> copy the id of the commit
	-> $ git checkout <id of commit> -- <path to the file>

It is a best practice to do it file by file, one by one, to avoid overriding too much.
There is a way to check on the whole project though.
	-> git checkout <id of the commit> : this will create a copy of the project in the moment of that commit.
	
	This is not recommended to do in the main branch, because it negates the verification part.
	The best practice would be to do it in a separate branch, and then cherry-pick the files you want to reverse one by one:

	-> git checkout <id of commit> -b <name of buffer branch>

Apocalypse reset. You can reset a whole project into a previous commit.
	
	-> git reset --hard <id of commit>
	And then force a push to overwrite the latest version with this commits code:
	-> git push -f

	This shouldn't be done unless absolutely necessary, for obvious reasons.

