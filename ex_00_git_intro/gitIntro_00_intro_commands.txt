Intro to git and the most common commands

	-> Create repository:
		- In root of the project.
		- Will create the directory as a hidden file.
		$ git init

	-> Check status
		- Will let you know the info about the git repository
		$ git status

	-> Add elements to the repository
		- Sends elements from the local directory to the git directory
		$ git add

	-> Commit changes
		- Commits the changes added to the git repository. Kind of like making a snapshot of the project.
		$ git commit -m "<message>"

Github introduction

	Github is not git. It is a library for git repositories. 
	Quick info:

	-> The name of the github repo doesn't have to be the same as the local one.

	-> Once the git repo is made and we made a commit, we can push it into the remote repo (that's basically github, a remote repository)

	-> We can have several remote repositories for different purposes. But we should create an origin one.
			$ git remote origin <link to github repo>
			$ git push origin master

	-> Interacting with the remote
		$ git push // Sends stuff into the remote repo
		$ git fetch // Takes stuff from the remote repo

	-> Selectin which remote to send the data:
		$ git push -u <name of remote> <name of the branch>
	
Git workflow

	It is a good practice to make a README.md (.md for markdown, it gets converted into html so it can be styled in the page).
	The README is an intro to the project with documentation and special notes and stuff.

.git directory examination

	You can check the ,git directory in your local directory by checking hidden files.
	There will be several other dirs inside it, let's go throught them:
		-> branches.
		-> hooks: a tool and a process that can be run at a specific time. Script that apply to the data in the dir, such as verifying that you wanna push in case you have several remotes and so on.
		-> info: show info on the repo
		-> logs: contains the info and the logs for the Commits
		-> objects: objects in memory
		-> refs: reference code and inside
		-> tags: in case we tag the dir
		-> COMMIT EDITMSG: allows to edit the commit messages.
		-> config: shows some technical info, notably the url of origin as well as the branch order and so on.

Using .gitignore

	You want to hide certain information, such as passwords, API keys and so on, because once it's in github anybody can see and steal it.
	For that purpose we use a .gitignore file where we list by name the files you don't want pushed into the repo.
	Be careful to spell things correctly.
	Sometimes it doesn't work because of cache stored data. To solve this we can remove the cache data by doing this:
		$ git rm -r --cached .

git pull intro

	When working with other people you need to be able to sync the local versions and the one in the remote.
	If someone makes a change in the remote, you won't see it in your local machine. It is stuck to the last time you worked it.
	To get up to date, you need to do:
	
		$ git pull

	And that will download and apply the changes for the last version.	
	 
git branches

	Branches are the way we use to work on a feature for the project without affecting the whole porject. The main branch is the main part of the project, and if you want to add to it without disturbing it, 
	you can create a new branch, work on it, and merge them once they are done.

basic branching

	So the way this branching is done is first creating the new branch:

		$ git checkout -b <name of branch> : this will create a new branch and move us to to it

	To go back to the other branches we type:

		$ git checkout <name of the other branch>

	The work being done in the other branch can be added, commited and pushed like normal, and it won't affect the main or the master branch.
	to add the changes we've made to the main branch we need to merge them:

		*from the main branch: $ git merge <little branch>

	We merge inwards, first checkout to the branch and then merge other branches into it.

Push and Merge a Remote Branch in Git

	In git and github, the branches are first considered "local" branches. In order to upload them for safe use and sharing,
	we need to do it manually. For that, after making the changes and creating the local branch, we need to push it in the "upstream"

		$ git push -u <name of the remote rep>

	Then, we will be able to merge them in the remote and use github's tools to validate and track changes.

Git rebase

	It forcefully updates the main branch, so it sets your feature branch (little branch) after whatever changes have been commited to the main branch,
	regrdless of the time or order.
	It is useful for project where you need access to the latest changes done to the main workflow, but it can mess up things, because it erases your commits, pastes the main branch, and then applies copies of your commits there.
	If working with shared feature branches it can lead to many problems. 
	
	So *!* Don't rebase if working in shaared feature branches *!*

		$ git rebase <main branch> <feature branch>
		
Git stash

	A way to save changes in a buffer. Not commited, but not deleted either. For small tasks too small to fully commit, but enough to require keeping.
	It works a bit like "malloc" it allocates the changes to a buffer that can then be accesed once we come back to work with it.
	As with malloc, it needs to be cleared afterwards or else we will have leaks.

		$ git stash : gets the changes into the stash and saves them.
		$ git stash list : lists the content in the stash
		$ git stash show : shows the changes done. Unlike "list", it tells what files and how many insertions are stashed.
		$ git stash apply : applies the stashed changes to the branch
		$ git stash clear : clears the stash and frees the memmory.

Git fetch vs Git pull

	Git pull updates and inserts all content in main into your local, overriding everything.
	Git fetch makes a middle step, download the changes, overlaps them with your code, but won't apply them unless you validate them.

Removing branches

	Just by typing -d:

		$ git branch -d <name of branch>

	To delete them in the remote too:

		$ git push <name of remote> --delete <name of branch>


